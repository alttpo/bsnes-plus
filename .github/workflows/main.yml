name: Main

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ main ]

jobs:
  mac-build:
    runs-on: macos-latest

    steps:
      - name: Install Qt
        run: brew update && brew install qt@5

      - uses: actions/checkout@v2
        name: Checkout
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Build wasm3
        run: |
          cd external/wasm3
          cmake -B build
          cmake --build build --parallel 8

      - name: Build bsnes-plus
        run: make -C bsnes -j8 qtpath=/usr/local/opt/qt@5 profile=performance local=false

      - uses: actions/upload-artifact@v2
        name: Upload
        with:
          name: bsnes-macos
          path: bsnes/out/bsnes*

  windows-build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2
        name: Checkout
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Build wasm3
        run: |
          cd external/wasm3
          cmake -G "MinGW Makefiles" -B build
          cmake --build build --parallel 8

      - name: Build bsnes-plus
        run: |
          mingw32-make -C bsnes -j8 platform=win profile=performance local=false

          cd bsnes\out

          move ..\..\snesfilter\snesfilter.dll
          move ..\..\snesreader\snesreader.dll
          move ..\..\snesmusic\snesmusic.dll
          move ..\..\supergameboy\supergameboy.dll

          mkdir bsxdat
          copy ..\data\bsxdat bsxdat

          copy "..\..\external\qt\mingw-w64\bin\*.dll"
          xcopy /E "..\..\external\qt\mingw-w64\plugins"
      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: bsnes-windows
          path: bsnes/out/

  release:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/wasm' || startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs:
      - windows-build
      - mac-build
    steps:
      - uses: actions/checkout@v2
        with:
          path: 'src'
      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          path: 'bin'
      - name: Package Artifacts
        run: |
          set -eu

          case ${GITHUB_REF} in
            refs/tags/*) suffix="-${GITHUB_REF#refs/tags/}" ;;
            refs/heads/main) suffix="-nightly" ;;
            refs/heads/wasm) suffix="-nightly" ;;
            *) suffix="" ;;
          esac

          srcdir="${GITHUB_WORKSPACE}/src"
          bindir="${GITHUB_WORKSPACE}/bin"

          # Hack: Workaround for GitHub artifacts losing attributes.
          #chmod +x ${bindir}/bsnes-ubuntu/bsnes-performance
          chmod +x ${bindir}/bsnes-macos/bsnes-plus.app/Contents/MacOS/bsnes-performance

          for os in windows macos
          do
            mkdir "${os}"
            cd "${os}"

            # Package bsnes.
            outdir=bsnes-plus${suffix}
            mkdir ${outdir}
            cp -ar ${bindir}/bsnes-${os}/* ${outdir}

            #if [[ "${os}" == "windows" ]]; then
            #  cp -a ${srcdir}/external/qt/mingw-w64/bin/*.dll ${outdir}
            #  cp -ar ${srcdir}/external/qt/mingw-w64/plugins ${outdir}
            #fi

            #mkdir ${outdir}/bsxdat
            #cp -a ${srcdir}/data/bsxdat/* ${outdir}/bsxdat

            zip -r ../bsnes-plus-${os}.zip ${outdir}

            cd -
          done
      - name: Create Release
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -eu
          github_rest()
          {
            local method="${1}"
            local url="https://api.github.com${2}"
            shift 2
            >&2 echo "${method} ${url}"
            curl \
              --fail \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: token ${GITHUB_TOKEN}" \
              -X "${method}" \
              "${url}" \
              "$@"
          }
          github_get_release_id_for_tag()
          {
            payload=$(github_rest GET "/repos/${GITHUB_REPOSITORY}/releases/tags/${1}") || return
            echo "${payload}" | jq .id
          }
          github_delete_release_by_id()
          {
            github_rest DELETE "/repos/${GITHUB_REPOSITORY}/releases/${1}"
          }
          github_create_release()
          {
            local payload="{
              \"tag_name\": \"${1}\",
              \"target_commitish\": \"${2}\",
              \"name\": \"${3}\",
              \"body\": \"${4}\",
              \"draft\": ${5},
              \"prerelease\": ${6}
            }"
            github_rest POST "/repos/${GITHUB_REPOSITORY}/releases" -d "${payload}"
          }
          make_nightly_release()
          {
            github_create_release \
              nightly \
              "${GITHUB_SHA}" \
              "bsnes-plus nightly $(date +"%Y-%m-%d")" \
              "Auto-generated nightly release on $(date -u +"%Y-%m-%d %T %Z")" \
              false \
              true
          }
          make_version_release()
          {
            github_create_release \
              "${1}" \
              "${GITHUB_SHA}" \
              "bsnes-plus ${1}" \
              "This is bsnes-plus ${1}, released on $(date +"%Y-%m-%d")." \
              false \
              false
          }
          case ${GITHUB_REF} in
            refs/tags/*)
              # Create a new version release using the current revision.
              echo "UPLOAD_URL=$(make_version_release ${GITHUB_REF#refs/tags/} | jq -r .upload_url)" >> $GITHUB_ENV
              ;;
            refs/heads/main | refs/heads/wasm)
              # Check for an existing nightly release.
              { release_id=$(github_get_release_id_for_tag nightly); status=$?; } || true
              # Delete existing nightly release if it exists.
              case ${status} in
                0) github_delete_release_by_id "${release_id}" ;;
                22) >&2 echo "No current nightly release; skipping tag deletion." ;;
                *) >&2 echo "API call failed unexpectedly." && exit 1 ;;
              esac
              # Create a new nightly release using the current revision.
              echo "UPLOAD_URL=$(make_nightly_release | jq -r .upload_url)" >> $GITHUB_ENV
              ;;
          esac
      - name: Upload bsnes-plus-windows
        uses: actions/upload-release-asset@v1
        env: { GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}' }
        with: { upload_url: '${{ env.UPLOAD_URL }}', asset_path: 'bsnes-plus-windows.zip', asset_name: 'bsnes-plus-windows.zip', asset_content_type: 'application/zip' }
      - name: Upload bsnes-plus-macos
        uses: actions/upload-release-asset@v1
        env: { GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}' }
        with: { upload_url: '${{ env.UPLOAD_URL }}', asset_path: 'bsnes-plus-macos.zip', asset_name: 'bsnes-plus-macos.zip', asset_content_type: 'application/zip' }
